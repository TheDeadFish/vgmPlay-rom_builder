// simple scientfic printing code
// replaces the uggly mess generated by msvcrt
// DeadFish Shitware, 2010-2013
#include "sciprn.h"
#include <string.h>

int sciPrnA(char* text, double in)
{
	// Convert double to string
	// Remove trailing zeros
	// Detect and return zero
	int expo, sign, slen;
	char* conv = ecvt(in,9,&expo,&sign);
	for(slen = 9; slen > 0; slen--) {
		if(conv[slen-1] != '0') {
			conv[slen] = 0;
			break;
		}
	}
	if(slen == 0) {
		strcpy(text, "0");
		return 1;
	}

	// Calculate length of decimal
	int decl;
	if(expo >= slen)
		decl = expo;
	else if(expo > 0)
		decl = slen+1;
	else
		decl = slen+2 - expo;
	
	// Calculate length of scientific
	int scil = (slen < 6) ? slen+2 : 8;
	int expo_ = expo;
	if(slen > 1)
		scil++;
	expo_--;
	if(expo_ < 0){
		scil++;
		expo_ = -expo_;
	}
	if(expo_ >= 100)
		scil++;
	if(expo_ >= 10)
		scil++;
		
	// Output shortest representaion
	if(sign) {
		*text++ = '-';
		decl++;
		scil++;
	}
	if(decl <= scil) {
		if(expo >= slen) {
			strcpy(text, conv);
			int tmp = expo - slen;
			text += slen;
			while(tmp--)
				*text++ = '0';
			*text = '\0';
		}
		else if(expo > 0) {
			for(int i = 0; i < slen; i++){
				if(i == expo)
					*text++ = '.';
				*text++ = conv[i];
			}
			*text = '\0';
		}
		else {
			*text++ = '0';
			*text++ = '.';
			while(expo++)
				*text++ = '0';
			strcpy(text, conv);
		}
		return decl;
	}
	else {
		if(slen > 6) {
			slen = 6;
			conv[6] = 0;
		}
		*text++ = conv[0];
		if(slen > 1)
			*text++ = '.';
		strncpy(text, conv+1, slen-1);
		text += slen-1;
		*text++ = 'e';
		itoa(expo-1, text, 10);
		return scil;
	}
}

int sciPrnW(wchar_t* text, double in)
{
	int len = sciPrnA((char*)text, in);
	for(int i = len; i >= 0; i--)
		text[i] = ((char*)text)[i];
	return len;
}
